#!/bin/bash

# Enhanced Simple Java Project Creator
# Usage: create-java-project <project-name> [main-class-name]

set -e # Exit on any error

PROJECT_NAME=$1
MAIN_CLASS=${2:-"Main"}

# Color codes for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
  echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
  echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
  echo -e "${RED}‚ùå $1${NC}"
}

# Validate input
if [ -z "$PROJECT_NAME" ]; then
  print_error "Project name is required!"
  echo -e "${YELLOW}Usage: $0 <project-name> [main-class-name]${NC}"
  echo -e "${YELLOW}Example: $0 MyProject Calculator${NC}"
  exit 1
fi

# Validate project name (no spaces, special chars except dash/underscore)
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z][a-zA-Z0-9_-]*$ ]]; then
  print_error "Invalid project name! Use only letters, numbers, dashes, and underscores. Must start with a letter."
  exit 1
fi

# Validate class name
if [[ ! "$MAIN_CLASS" =~ ^[A-Z][a-zA-Z0-9]*$ ]]; then
  print_error "Invalid class name! Must start with uppercase letter and contain only letters and numbers."
  exit 1
fi

# Check if project directory already exists
if [ -d "$PROJECT_NAME" ]; then
  print_warning "Directory '$PROJECT_NAME' already exists!"
  read -p "Do you want to continue? This may overwrite existing files. (y/n): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print_info "Operation cancelled."
    exit 0
  fi
fi

print_info "Creating Java project: $PROJECT_NAME"
print_info "Main class: $MAIN_CLASS"

# Create project structure
mkdir -p "$PROJECT_NAME"/{src,out,lib,docs}

# Create main Java file
cat >"$PROJECT_NAME/src/$MAIN_CLASS.java" <<EOF
/**
 * Main class for the $PROJECT_NAME project
 * 
 * @author $(whoami)
 * @version 1.0
 * @since $(date +%Y-%m-%d)
 */
public class $MAIN_CLASS {
    
    /**
     * Main method - entry point of the application
     * 
     * @param args command line arguments
     */
    public static void main(String[] args) {
        System.out.println("üöÄ Welcome to $PROJECT_NAME!");
        System.out.println("üìÅ Project initialized successfully.");
        
        // Your code here
        if (args.length > 0) {
            System.out.println("üìù Arguments passed: " + String.join(", ", args));
        }
    }
}
EOF

# Create a simple utility class example
cat >"$PROJECT_NAME/src/Utils.java" <<EOF
/**
 * Utility class with common helper methods
 */
public class Utils {
    
    /**
     * Prints a formatted message
     * 
     * @param message the message to print
     */
    public static void log(String message) {
        System.out.println("[" + getCurrentTimestamp() + "] " + message);
    }
    
    /**
     * Gets current timestamp as string
     * 
     * @return formatted timestamp
     */
    private static String getCurrentTimestamp() {
        return java.time.LocalDateTime.now().toString();
    }
}
EOF

# Create README file
cat >"$PROJECT_NAME/README.md" <<EOF
# $PROJECT_NAME

A simple Java project created on $(date +%Y-%m-%d).

## Project Structure

\`\`\`
$PROJECT_NAME/
‚îú‚îÄ‚îÄ src/           # Source code files
‚îú‚îÄ‚îÄ out/           # Compiled class files
‚îú‚îÄ‚îÄ lib/           # External libraries (if needed)
‚îú‚îÄ‚îÄ docs/          # Documentation
‚îî‚îÄ‚îÄ README.md      # This file
\`\`\`

## How to Build and Run

### Compile the project:
\`\`\`bash
javac -d out src/*.java
\`\`\`

### Run the main class:
\`\`\`bash
java -cp out $MAIN_CLASS
\`\`\`

### Run with arguments:
\`\`\`bash
java -cp out $MAIN_CLASS arg1 arg2 arg3
\`\`\`

## Development

- Main class: \`$MAIN_CLASS.java\`
- Add your source files to the \`src/\` directory
- Compiled classes will be placed in \`out/\`
- External JARs can be placed in \`lib/\`

## Notes

This is a simple Java project without build tools like Maven or Gradle.
For larger projects, consider using a build tool for dependency management.
EOF

# Create build script
cat >"$PROJECT_NAME/build.sh" <<EOF
#!/bin/bash
# Simple build script for $PROJECT_NAME

echo "üî® Building $PROJECT_NAME..."

# Create output directory if it doesn't exist
mkdir -p out

# Compile all Java files
if javac -d out src/*.java; then
    echo "‚úÖ Build successful!"
    echo "üëâ Run with: java -cp out $MAIN_CLASS"
else
    echo "‚ùå Build failed!"
    exit 1
fi
EOF

# Make build script executable
chmod +x "$PROJECT_NAME/build.sh"

# Create run script
cat >"$PROJECT_NAME/run.sh" <<EOF
#!/bin/bash
# Simple run script for $PROJECT_NAME

if [ ! -f "out/$MAIN_CLASS.class" ]; then
    echo "‚ö†Ô∏è  Project not built yet. Building now..."
    ./build.sh
fi

echo "üöÄ Running $PROJECT_NAME..."
java -cp out $MAIN_CLASS "\$@"
EOF

# Make run script executable
chmod +x "$PROJECT_NAME/run.sh"

# Create .gitignore
cat >"$PROJECT_NAME/.gitignore" <<EOF
# Compiled class files
*.class
out/

# Log files
*.log

# IDE files
.vscode/
.idea/
*.iml

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Desktop.ini
Thumbs.db
EOF

print_success "Project '$PROJECT_NAME' created successfully!"
echo
print_info "Project structure:"
tree "$PROJECT_NAME" 2>/dev/null || find "$PROJECT_NAME" -type f | sort

echo
print_success "üéâ Setup complete! Here's what you can do:"
echo -e "${GREEN}üìÅ Navigate to project: ${NC}cd $PROJECT_NAME"
echo -e "${GREEN}üî® Build project:       ${NC}./build.sh"
echo -e "${GREEN}üöÄ Run project:         ${NC}./run.sh"
echo -e "${GREEN}üìù Edit main class:     ${NC}nano src/$MAIN_CLASS.java"
echo
echo -e "${BLUE}üí° Manual commands:${NC}"
echo -e "${BLUE}   Compile: ${NC}javac -d out src/*.java"
echo -e "${BLUE}   Run:     ${NC}java -cp out $MAIN_CLASS"
